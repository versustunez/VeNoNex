#pragma once

#include "../BaseComponent.h"
#include "../Base/VeNoSelect.h"

namespace VeNo
{
    struct GUIItem
    {
        std::string type;
        std::string parameter;
        std::string name;
        int x;
        int y;
        int w;
        int h;
        VeNoSelect::Type selectType;
        BaseComponent* component;
    };

    struct BlockStruct
    {
        std::string name;
        int x;
        int y;
        int w;
        int h;
    };

    /**
     * Class that Holds everything a Oscillator can use! It's not for the LFO
     * Waveform, Unison, Envelope, Pitch, OSC-Main (Phase, Random-Phase, Pan), Limiter
     */
    class OscillatorPage : public BaseComponent
    {
    public:
        OscillatorPage (const std::string& name, const std::string& pid);

        ~OscillatorPage () override;

        void resized () override;

        void paint (Graphics& g) override;

        // method is generated by json-to-gui.js!
        void setupGui ();

        void createItem(GUIItem item);

    protected:
        std::string m_name;
        std::vector<BlockStruct> m_blocks;
        std::vector<GUIItem> m_gui_parts;
    };
}